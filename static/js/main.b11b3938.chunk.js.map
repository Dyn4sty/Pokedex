{"version":3,"sources":["serviceWorker.js","Components/SearchBox.js","Components/Scroll.js","Components/ErrorBoundary.js","redux/pokemons/pokemons.types.js","containers/App.js","redux/pokemons/pokemons.actions.js","redux/pokemons/pokemons.reducer.js","redux/root-reducer.js","redux/store.js","index.js"],"names":["isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","SearchBox","searchChange","className","type","placeholder","onChange","Scroll","props","style","overflow","height","children","ErrorBoundary","hasError","this","setState","React","Component","PokemonsActionTypes","FETCH_POKEMONS_START","FETCH_POKEMONS_SUCCESS","FETCH_POKEMONS_FAILURE","SEARCH_POKEMONS","PokemonList","lazy","connect","pokemons","searchfield","Pokemons","dispatch","setSearchField","text","payload","requestPokemons","fetch","res","json","results","err","useEffect","filteredPokemons","filter","Pokemon","name","toLowerCase","includes","event","target","value","fallback","INITAL_STATE","pokemonsReducer","action","rootReducer","combineReducers","middlewares","thunk","store","createStore","applyMiddleware","ReactDOM","render","document","getElementById","URL","process","href","origin","addEventListener","response","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.b11b3938.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react'\r\n\r\nconst SearchBox = ({searchChange}) => {\r\n    return (\r\n        <div className='pa2'>\r\n            <input className='pa3 ba b--green bg-lightest-blue' type=\"search\" \r\n            placeholder='Search Pokemon'\r\n            onChange={searchChange}></input>\r\n        </div>\r\n    )\r\n}\r\nexport default SearchBox","import React from 'react'\r\n\r\n\r\nconst Scroll = (props) => {\r\n    return (\r\n        <div style={{overflow: 'scroll', height: '800px'}}>\r\n            {props.children}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Scroll\r\n","import React from 'react'\r\nexport default class ErrorBoundary extends React.Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            hasError: false\r\n        }\r\n    }\r\n\r\n    componentDidCatch() {\r\n        this.setState({ hasError: true })\r\n    }\r\n    \r\n    render() {\r\n        if (this.state.hasError) {\r\n            return 'Error'\r\n        }\r\n        return this.props.children\r\n    }\r\n}\r\n","const PokemonsActionTypes = {\r\n  FETCH_POKEMONS_START: \"FETCH_POKEMONS_START\",\r\n  FETCH_POKEMONS_SUCCESS: \"FETCH_POKEMONS_SUCCESS\",\r\n  FETCH_POKEMONS_FAILURE: \"FETCH_POKEMONS_FAILURE\",\r\n  SEARCH_POKEMONS: 'SEARCH_POKEMONS',\r\n};\r\n\r\nexport default PokemonsActionTypes;\r\n","import React, { Suspense, lazy, useEffect } from \"react\";\r\nimport { connect } from \"react-redux\";\r\n// import PokemonList from \"../Components/CardList\";\r\nimport SearchBox from \"../Components/SearchBox\";\r\nimport Scroll from \"../Components/Scroll\";\r\nimport ErrorBoundary from \"../Components/ErrorBoundary\";\r\nimport \"./app.css\";\r\nimport { setSearchField, requestPokemons } from \"../redux/pokemons/pokemons.actions\";\r\nconst PokemonList = lazy(() => import(\"../Components/CardList\"));\r\n\r\nconst App = ({searchfield, Pokemons, setSearchField, requestPokemons}) => {\r\n  const onSearchChange = (event) => {\r\n    setSearchField(event.target.value);\r\n  };\r\n\r\n  useEffect(() => {\r\n    requestPokemons()\r\n  }, [requestPokemons]);\r\n\r\n  const filteredPokemons = Pokemons.filter((Pokemon) => {\r\n    return Pokemon.name.toLowerCase().includes(searchfield.toLowerCase());\r\n  });\r\n\r\n  return (\r\n    <div className=\"tc\">\r\n      <h1 className=\"f1\">Pokedex</h1>\r\n      <SearchBox searchChange={onSearchChange} />\r\n      <Scroll>\r\n        <ErrorBoundary>\r\n          <Suspense fallback={<>Loading...</>}>\r\n            <PokemonList Pokemons={filteredPokemons} />\r\n          </Suspense>\r\n        </ErrorBoundary>\r\n      </Scroll>\r\n    </div>\r\n  );\r\n};\r\nconst mapDispatchToProps = (dispatch) => ({\r\n  setSearchField: (text) => dispatch(setSearchField(text)),\r\n  requestPokemons: () => dispatch(requestPokemons()),\r\n});\r\n\r\nconst mapStateToProps = ({ pokemons }) => ({\r\n  searchfield: pokemons.searchfield,\r\n  Pokemons: pokemons.Pokemons,\r\n});\r\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\r\n","import PokemonsActionTypes from \"./pokemons.types\";\r\n\r\nexport const setSearchField = (text) => ({\r\n  type: PokemonsActionTypes.SEARCH_POKEMONS,\r\n  payload: text,\r\n});\r\n\r\nexport const requestPokemons = () => (dispatch) => {\r\n  dispatch({ type: PokemonsActionTypes.FETCH_POKEMONS_START });\r\n  fetch(\"https://pokeapi.co/api/v2/pokemon/?limit=807&offset=0\")\r\n    .then((res) => res.json())\r\n    .then(({ results }) => {\r\n      dispatch({\r\n        type: PokemonsActionTypes.FETCH_POKEMONS_SUCCESS,\r\n        payload: results,\r\n      });\r\n    })\r\n    .catch((err) =>\r\n      dispatch({\r\n        type: PokemonsActionTypes.FETCH_POKEMONS_FAILURE,\r\n        payload: err,\r\n      })\r\n    );\r\n};\r\n","import PokemonsActionTypes from \"./pokemons.types\";\r\n\r\nconst INITAL_STATE = {\r\n  Pokemons: [],\r\n  searchfield: \"\",\r\n  error: null,\r\n};\r\n\r\nconst pokemonsReducer = (state = INITAL_STATE, action) => {\r\n  switch (action.type) {\r\n    case PokemonsActionTypes.SEARCH_POKEMONS:\r\n      return {\r\n        ...state,\r\n        searchfield: action.payload,\r\n      };\r\n    case PokemonsActionTypes.FETCH_POKEMONS_SUCCESS:\r\n      return {\r\n        ...state,\r\n        Pokemons: action.payload,\r\n      };\r\n    case PokemonsActionTypes.FETCH_POKEMONS_FAILURE:\r\n        return {\r\n            ...state,\r\n            error: action.payload\r\n        }\r\n    default:\r\n      return state;\r\n  }\r\n};\r\nexport default pokemonsReducer;\r\n","import { combineReducers } from \"redux\";\r\nimport pokemonsReducer from \"./pokemons/pokemons.reducer\";\r\nconst rootReducer = combineReducers({\r\n  pokemons: pokemonsReducer,\r\n});\r\n\r\nexport default rootReducer;\r\n","import { createStore, applyMiddleware } from \"redux\";\r\nimport logger from \"redux-logger\";\r\nimport thunk from 'redux-thunk'\r\nimport rootReducer from './root-reducer';\r\n\r\nconst middlewares = [thunk];\r\n\r\nif (process.env.NODE_ENV === \"development\") {\r\n  middlewares.push(logger);\r\n}\r\n\r\nexport const store = createStore(rootReducer, applyMiddleware(...middlewares));\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport \"tachyons\";\nimport \"./index.css\";\nimport App from \"./containers/App\";\nimport { Provider } from \"react-redux\";\nimport { store } from \"./redux/store\";\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById(\"root\")\n);\nserviceWorker.register();\n"],"sourceRoot":""}