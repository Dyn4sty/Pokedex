{"version":3,"sources":["serviceWorker.js","Components/Card.js","Components/CardList.js","Components/SearchBox.js","Components/Scroll.js","Components/ErrorBoundary.js","containers/App.js","index.js"],"names":["Boolean","window","location","hostname","match","Card","s","name","url","PokeIndex","id","split","length","className","alt","width","height","src","charAt","toUpperCase","slice","PokemonList","Pokemons","map","pokemon","key","SearchBox","searchChange","type","placeholder","onChange","Scroll","props","style","overflow","children","ErrorBoundary","state","hasError","this","setState","React","Component","App","onSearchChange","event","searchfield","target","value","axios","get","res","data","filteredPokemons","filter","Pokemon","toLowerCase","includes","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"qOAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,4FCESC,EAbF,SAAC,GAAqB,IALfC,EAKLC,EAAmB,EAAnBA,KAAMC,EAAa,EAAbA,IACXC,GADwB,EAARC,GACJF,EAAIG,MAAM,KAAKH,EAAIG,MAAM,KAAKC,OAAS,IACzD,OACI,yBAAKC,UAAU,oDACX,yBAAKC,IAAI,UAAUC,MAAM,MAAMC,OAAO,MAAMC,IAAG,mFAA8ER,EAA9E,UAC/C,6BACI,4BAVK,kBADDH,EAWYC,GAVM,GAC3BD,EAAEY,OAAO,GAAGC,cAAgBb,EAAEc,MAAM,IAU/B,+BAAKX,MCWNY,EAtBK,SAAC,GAAkB,IAAjBC,EAAgB,EAAhBA,SAEhB,OACE,6BACGA,EACC,yBAAKT,UAAU,OACZS,EAASC,KAAI,SAAAC,GAAO,OACnB,kBAAC,EAAD,CACEC,IAAKD,EAAQjB,KACbA,KAAMiB,EAAQjB,KACdC,IAAKgB,EAAQhB,UAKnB,yCCPGkB,EATG,SAAC,GAAoB,IAAnBC,EAAkB,EAAlBA,aAChB,OACI,yBAAKd,UAAU,OACX,2BAAOA,UAAU,mCAAmCe,KAAK,SACzDC,YAAY,iBACZC,SAAUH,MCIPI,EARA,SAACC,GACZ,OACI,yBAAKC,MAAO,CAACC,SAAU,SAAUlB,OAAQ,UACpCgB,EAAMG,WCLEC,E,YACjB,WAAYJ,GAAQ,IAAD,8BACf,4CAAMA,KACDK,MAAQ,CACTC,UAAU,GAHC,E,iFAQfC,KAAKC,SAAS,CAAEF,UAAU,M,+BAI1B,OAAIC,KAAKF,MAAMC,SACJ,QAEJC,KAAKP,MAAMG,a,GAhBiBM,IAAMC,WC4ClCC,G,kBApCX,aAAe,IAAD,8BACV,+CAaJC,eAAiB,SAACC,GACd,EAAKL,SAAS,CAAEM,YAAaD,EAAME,OAAOC,SAb1C,EAAKX,MAAQ,CACTf,SAAU,GACVwB,YAAa,GACbtC,IAAK,yDALC,E,mNASYyC,IAAMC,IAAIX,KAAKF,MAAM7B,K,OAAjC2C,E,OACAC,EAAOD,EAAIC,KAAJ,QACbb,KAAKC,SAAS,CAAClB,SAAU8B,I,qIAMvB,IAAD,EAC2Bb,KAAKF,MAA9Bf,EADF,EACEA,SAAUwB,EADZ,EACYA,YACXO,EAAmB/B,EAASgC,QAAO,SAAAC,GACrC,OAAOA,EAAQhD,KAAKiD,cAAcC,SAASX,EAAYU,kBAE3D,OACI,yBAAK3C,UAAU,MACX,wBAAIA,UAAU,MAAd,WACA,kBAAC,EAAD,CAAWc,aAAcY,KAAKK,iBAC9B,kBAAC,EAAD,KACI,kBAAC,EAAD,KACI,kBAAC,EAAD,CAAatB,SAAY+B,W,GA7B/BZ,IAAMC,YCAxBgB,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SPyH3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.f3f6e1d0.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react'\r\n\r\nconst capitalize = (s) => {\r\n    if (typeof s !== 'string') return ''\r\n    return s.charAt(0).toUpperCase() + s.slice(1)\r\n  }\r\n\r\nconst Card = ({name, url, id}) => {\r\n    const PokeIndex = url.split('/')[url.split('/').length - 2]\r\n    return (\r\n        <div className='bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5'>\r\n            <img alt='pokemon' width='150' height='150' src={`https://raw.githubusercontent.com/PokeAPI/sprites/master/sprites/pokemon/${PokeIndex}.png`} />\r\n            <div>\r\n                <h2>{capitalize(name)}</h2>\r\n                <p>#{PokeIndex}</p>\r\n            </div>\r\n        </div>\r\n\r\n    )\r\n}\r\nexport default Card\r\n","import React from 'react'\r\nimport Card from './Card'\r\n\r\nconst PokemonList = ({Pokemons} ) =>  {\r\n\r\n      return (\r\n        <div>\r\n          {Pokemons ? (\r\n            <div className=\"row\">\r\n              {Pokemons.map(pokemon => (\r\n                <Card\r\n                  key={pokemon.name}\r\n                  name={pokemon.name}\r\n                  url={pokemon.url}\r\n                />\r\n              ))}\r\n            </div>\r\n          ) : (\r\n            <h1>Loading</h1>\r\n          )}\r\n        </div>\r\n      );\r\n    }\r\n  \r\n\r\nexport default PokemonList","import React from 'react'\r\n\r\nconst SearchBox = ({searchChange}) => {\r\n    return (\r\n        <div className='pa2'>\r\n            <input className='pa3 ba b--green bg-lightest-blue' type=\"search\" \r\n            placeholder='Search Pokemon'\r\n            onChange={searchChange}></input>\r\n        </div>\r\n    )\r\n}\r\nexport default SearchBox","import React from 'react'\r\n\r\n\r\nconst Scroll = (props) => {\r\n    return (\r\n        <div style={{overflow: 'scroll', height: '800px'}}>\r\n            {props.children}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Scroll\r\n","import React from 'react'\r\nexport default class ErrorBoundary extends React.Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            hasError: false\r\n        }\r\n    }\r\n\r\n    componentDidCatch() {\r\n        this.setState({ hasError: true })\r\n    }\r\n    \r\n    render() {\r\n        if (this.state.hasError) {\r\n            return 'Error'\r\n        }\r\n        return this.props.children\r\n    }\r\n}\r\n","import React from 'react'\r\nimport axios from 'axios'\r\nimport PokemonList from '../Components/CardList'\r\nimport SearchBox from '../Components/SearchBox'\r\nimport Scroll from '../Components/Scroll'\r\nimport ErrorBoundary from '../Components/ErrorBoundary'\r\nimport './app.css';\r\n\r\nclass App extends React.Component {\r\n    constructor() {\r\n        super()\r\n        this.state = {\r\n            Pokemons: [],\r\n            searchfield: '',\r\n            url: 'https://pokeapi.co/api/v2/pokemon/?limit=807&offset=0',\r\n        }\r\n    }\r\n    async componentDidMount() {\r\n            const res = await axios.get(this.state.url);\r\n            const data = res.data['results']\r\n            this.setState({Pokemons: data})          \r\n      }\r\n  \r\n    onSearchChange = (event) => {\r\n        this.setState({ searchfield: event.target.value})           \r\n    }\r\n    render() {\r\n        const {Pokemons, searchfield} = this.state\r\n        const filteredPokemons = Pokemons.filter(Pokemon => {\r\n            return Pokemon.name.toLowerCase().includes(searchfield.toLowerCase())\r\n        })\r\n        return (\r\n            <div className='tc'>\r\n                <h1 className='f1'>Pokedex</h1>\r\n                <SearchBox searchChange={this.onSearchChange} />\r\n                <Scroll>\r\n                    <ErrorBoundary>\r\n                        <PokemonList Pokemons = {filteredPokemons} />\r\n                    </ErrorBoundary>\r\n                </Scroll>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default App","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\nimport './index.css'\nimport App from './containers/App';\n\n\nReactDOM.render(<App /> ,document.getElementById('root'));\nserviceWorker.unregister();\n"],"sourceRoot":""}